/*
 * Copyright (c) 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * @test
 * @summary Test the Template Library's expression generation. This test generates random
 *          expressions, and runs them with random inputs, comparing the results generated
 *          in the interpreter with the results generated by the compiled code.
 * @modules java.base/jdk.internal.misc
 * @library /test/lib /
 * @compile ../../../compiler/lib/ir_framework/TestFramework.java
 * @compile ../../../compiler/lib/generators/Generators.java
 * @compile ../../../compiler/lib/verify/Verify.java
 * @run driver template_library.examples.TestFuzzExpression
 */

package template_library.examples;

import java.util.List;
import java.util.ArrayList;

import compiler.lib.compile_framework.CompileFramework;

import compiler.lib.template_framework.Template;
import compiler.lib.template_framework.TemplateWithArgs;
import static compiler.lib.template_framework.Template.body;
import static compiler.lib.template_framework.Template.let;
import static compiler.lib.template_framework.Template.$;

import compiler.lib.template_library.Library;
import compiler.lib.template_library.IRTestClass;
import compiler.lib.template_library.Type;
import compiler.lib.template_library.Expression;
import compiler.lib.template_library.Value;

/**
 * This is a basic expression fuzzer: it generates random expressions using {@link Library.Expression},
 * and verifies the results using {@link Verify.checkEQ}.
 * <p>
 * The "@compile" command for JTREG is required so that the frameworks used in the Template code
 * are compiled and available for the Test-VM.
 * <p>
 * Additionally, we must set the classpath for the Test-VM, so that it has access to all compiled
 * classes (see {@link CompileFramework#getEscapedClassPathOfCompiledClasses}).
 */
public class TestFuzzExpression {

    public static void main(String[] args) {
        // Create a new CompileFramework instance.
        CompileFramework comp = new CompileFramework();

        // Add a java source file.
        comp.addJavaSourceCode("p.xyz.InnerTest", generate(comp));

        // Compile the source file.
        comp.compile();

        // Object ret = p.xyz.InnterTest.main();
        Object ret = comp.invoke("p.xyz.InnerTest", "main", new Object[] {});
    }

    // Generate a source Java file as String
    public static String generate(CompileFramework comp) {
        // Create the info required for the test class.
        // It is imporant that we pass the classpath to the Test-VM, so that it has access
        // to all compiled classes.
        IRTestClass.Info info = new IRTestClass.Info(comp.getEscapedClassPathOfCompiledClasses(),
                                                     "p.xyz", "InnerTest",
                                                     List.of("compiler.lib.generators.*",
                                                             "compiler.lib.verify.*"));

        // Example 1:
        // We use the "expression" twice: once in a reference method that runs in the interpreter,
        // once in the test method that is compiled. Then we compare the results.
        // The argValues may want to define fields in "def" so that they can load from them in "use".
        // We only want to do the "def" part once, but the "use" part twice, so we have to split it.
        //
        // Note: we are using the "expression" in two separate methods, so we cannot generate any
        // fields with "def", as we would have to generate them identically twice.
        var template1 = Template.make("type", (Type type)-> {
            Expression expression = Expression.make(type, Type.primitives(), 2);
            List<Value> argValues = expression.randomArgValues();
            List<Object> def = argValues.stream().map(v -> v.defTokens()).toList();
            List<Object> use = argValues.stream().map(v -> v.useTokens()).toList();
            return body(
                """
                // --- $test start ---
                // Using $reference
                // type: #type
                """,
                Library.CLASS_HOOK.set(
                    def,
                    """

                    @DontCompile
                    public static Object $reference() {
                        try {
                    """,
                    "        return ", expression.withArgs(use), ";\n",
                    """
                        } catch (Exception e) {
                            return e;
                        }
                    }

                    @Test
                    public static Object $test() {
                        try {
                    """,
                    "        return ", expression.withArgs(use), ";\n",
                    """
                        } catch (Exception e) {
                            return e;
                        }
                    }

                    @Check(test = "$test")
                    public static void $check(Object result) {
                        Object gold = $reference();
                        Verify.checkEQ(result, gold);
                    }

                    // --- $test end   ---
                    """
                )
            );
        });

        // Example 2:
        // We only use the "expression" once, and so we can conveniently just run it with
        // random arguments. Those may also generate their own fields under the hood.
        //
        // Note: we put the expression in a separate Template so that the method and class
        // hook are both already set before we call "expression.withRandomArgs", and so that
        // we know we can generate fields and local variables.
        var template2Body = Template.make("type", (Type type)-> {
            Expression expression = Expression.make(type, Type.primitives(), 2);
            return body(
                """
                    try {
                """,
                "        return ", expression.withRandomArgs(), ";\n",
                """
                    } catch (Exception e) {
                        return e;
                    }
                """
            );
        });
        var template2 = Template.make("type", (Type type)-> {
            return body(
                """
                // --- $test start ---
                // Using $GOLD
                // type: #type
                """,
                Library.CLASS_HOOK.set(
                    """

                    static final Object $GOLD = $test();

                    @Test
                    public static Object $test() {
                    """,
                    Library.METHOD_HOOK.set(
                        template2Body.withArgs(type)
                    ),
                    """
                    }

                    @Check(test = "$test")
                    public static void $check(Object result) {
                        Verify.checkEQ(result, $GOLD);
                    }

                    // --- $test end   ---
                    """
                )
            );
        });

        var defineArray = Template.make("type", "name", "size", (Type type, String name, Integer size) -> body(
            """
            public static #type[] #name = new #type[#size];
            """
        ));

        // Example 3:
        // We use the expression to iterate over arrays, loading from a set of input arrays,
        // and storing to an output array.
        var template3 = Template.make("type", (Type type)-> {
            int size = 10_000; // TODO: randomize
            Expression expression = Expression.make(type, Type.primitives(), 2);
            List<Type> types = expression.types();
            List<TemplateWithArgs> arrayDefinitions = new ArrayList<>();
            List<Object> args = new ArrayList<>();
            for (int i = 0; i < types.size(); i++) {
                String name = $("array") + "_" + i;
                arrayDefinitions.add(defineArray.withArgs(types.get(i), name, size));
                args.add(name + "[i]");
            }
            return body(
                let("size", size),
                """
                // --- $test start ---
                // Using $GOLD
                // type: #type
                """,
                Library.CLASS_HOOK.set(
                    """
                    // Input arrays:
                    """,
                    arrayDefinitions,
                    """

                    static final Object $GOLD = $test();

                    @Test
                    public static Object $test() {
                        try {
                            #type[] out = new #type[#size];
                            for (int i = 0; i < out.length; i++) {
                    """,
                    "            out[i] = ", expression.withArgs(args), ";\n",
                    """
                            }
                            return out;
                        } catch (Exception e) {
                            return e;
                        }
                    }

                    @Check(test = "$test")
                    public static void $check(Object result) {
                        Verify.checkEQ(result, $GOLD);
                    }

                    // --- $test end   ---
                    """
                )
            );
        });

        // TODO: hand-unrollling case

        // Use template1 100 times with every type.
        List<TemplateWithArgs> templates = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            for (Type type : Type.primitives()) {
                templates.add(template1.withArgs(type));
                templates.add(template2.withArgs(type));
                templates.add(template3.withArgs(type));
            }
        }
        return IRTestClass.TEMPLATE.withArgs(info, templates).render();
    }
}
