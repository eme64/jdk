/*
 * Copyright (c) 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * @test
 * @summary Test the Template Library's expression generation. This test generates random
 *          expressions, and runs them with random inputs, comparing the results generated
 *          in the interpreter with the results generated by the compiled code.
 * @modules java.base/jdk.internal.misc
 * @library /test/lib /
 * @compile ../../../compiler/lib/ir_framework/TestFramework.java
 * @compile ../../../compiler/lib/generators/Generators.java
 * @compile ../../../compiler/lib/verify/Verify.java
 * @run driver template_library.examples.TestFuzzExpression
 */

package template_library.examples;

import java.util.List;
import java.util.ArrayList;

import compiler.lib.compile_framework.CompileFramework;

import compiler.lib.template_framework.Template;
import compiler.lib.template_framework.TemplateWithArgs;
import static compiler.lib.template_framework.Template.body;
import static compiler.lib.template_framework.Template.let;

import compiler.lib.template_library.Library;
import compiler.lib.template_library.IRTestClass;
import compiler.lib.template_library.Types;

/**
 * This is a basic expression fuzzer: it generates random expressions using {@link Library.Expression},
 * and verifies the results using {@link Verify.checkEQ}.
 * <p>
 * The "@compile" command for JTREG is required so that the frameworks used in the Template code
 * are compiled and available for the Test-VM.
 * <p>
 * Additionally, we must set the classpath for the Test-VM, so that it has access to all compiled
 * classes (see {@link CompileFramework#getEscapedClassPathOfCompiledClasses}).
 */
public class TestFuzzExpression {

    public static void main(String[] args) {
        // Create a new CompileFramework instance.
        CompileFramework comp = new CompileFramework();

        // Add a java source file.
        comp.addJavaSourceCode("p.xyz.InnerTest", generate(comp));

        // Compile the source file.
        comp.compile();

        // Object ret = p.xyz.InnterTest.main();
        Object ret = comp.invoke("p.xyz.InnerTest", "main", new Object[] {});
    }

    // Generate a source Java file as String
    public static String generate(CompileFramework comp) {
        // Create the info required for the test class.
        // It is imporant that we pass the classpath to the Test-VM, so that it has access
        // to all compiled classes.
        IRTestClass.Info info = new IRTestClass.Info(comp.getEscapedClassPathOfCompiledClasses(),
                                                     "p.xyz", "InnerTest",
                                                     List.of("compiler.lib.generators.*",
                                                             "compiler.lib.verify.*"));

        var template1 = Template.make("type", (Types.ExpressionType type)-> body(
            """
            // --- $test start ---
            // type: #type
            """,
            // We set a dedicated class hook here, so that fields are
            // NOT available across the tests.
            Library.CLASS_HOOK.set(
            """

            private static Object $GOLD = $test();

            @Test
            public static Object $test() {
            """,
            Library.METHOD_HOOK.set(
                // We need to catch Exceptions like ArithmeticException, so that we do
                // not get ExceptionInInitializerError when loading the class and running
                // the static code blocks.
                "try {\n",
                "    return ", Types.EXPRESSION.withArgs(type), ";\n",
                """
                } catch (Exception e) {
                    return e;
                }
                """
            ),
            """
            }

            @Check(test = "$test")
            public static void $check(Object result) {
                Verify.checkEQ(result, $GOLD);
            }

            """
            ),
            """
            // --- $test end   ---
            """
        ));

        // Use template1 100 times with every type.
        List<TemplateWithArgs> templates = new ArrayList<>();
        for (int i = 0; i < 100; i++) {
            for (Types.ExpressionType type : Types.ALL_EXPRESSION_TYPES) {
                templates.add(template1.withArgs(type));
            }
        }
        return IRTestClass.TEMPLATE.withArgs(info, templates).render();
    }
}
